<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					mc:Ignorable="d">

    <!--  NormalBrush は Button、RepeatButton の背景に使用されます -->
	<!-- バッググラウンド用 -->
	<SolidColorBrush x:Key="HybridComboBoxNormalBrush" Color="#111"/>
	<SolidColorBrush x:Key="HybridComboBoxInvNormalBrush" Color="#EEE"/>
	<!-- 境界線用 -->
	<SolidColorBrush x:Key="HybridComboBoxNormalBorderBrush" Color="#777"/>
	<SolidColorBrush x:Key="HybridComboBoxInvNormalBorderBrush" Color="#999"/>

	<!-- LightBrush はメニュー、タブ コントロールの背景などのコンテンツ領域に使用されます -->
	<!-- バッググラウンド用 -->
	<SolidColorBrush x:Key="HybridComboBoxLightBrush" Color="#000"/>
	<!-- 境界線用 -->
	<SolidColorBrush x:Key="HybridComboBoxNormalLightBrush" Color="#444"/>

	<!-- MouseOverBrush は Button、Radio Button、CheckBox の MouseOver に使用されます -->
	<!-- バッググラウンド用 -->
	<SolidColorBrush x:Key="HybridComboBoxMouseOverBrush" Color="#40FFFFFF"/>
	<SolidColorBrush x:Key="HybridComboBoxInvMouseOverBrush" Color="#40404040"/>
	<SolidColorBrush x:Key="HybridComboBoxMouseOverForegroundBrush" Color="#FFF"/>

	<!-- PressedBrush は Button、Radio Button、CheckBox の Pressed (押された状態時) に使用されます -->
	<!-- バッググラウンド用 -->
	<SolidColorBrush x:Key="HybridComboBoxPressedBrush" Color="#FF2464FF"/>
	<!-- 境界線用 -->
	<SolidColorBrush x:Key="HybridComboBoxPressedBorderBrush" Color="#999"/>

	<!-- 無効ブラシは各コントロールの無効状態の表示に使用されます -->
	<SolidColorBrush x:Key="HybridComboBoxDisabledForegroundBrush" Color="#24FFFFFF"/>
	<SolidColorBrush x:Key="HybridComboBoxDisabledBackgroundBrush" Color="#111"/>
	<SolidColorBrush x:Key="HybridComboBoxDisabledBorderBrush" Color="#24FFFFFF"/>

	<!-- SelectedBackgroundBrush は ListBoxItem、ComboBoxItem の選択されたアイテムに使用されます-->
	<SolidColorBrush x:Key="HybridComboBoxSelectedBackgroundBrush" Color="#222"/>

	<SolidColorBrush x:Key="HybridComboBoxSelectedBorderBrush" Color="#777"/>

	<!-- DefaultedBorderBrush は KeyBoardFocus の表示に使用されます -->
	<SolidColorBrush x:Key="HybridComboBoxDefaultedBorderBrush" Color="#CCC"/>

	<SolidColorBrush x:Key="HybridComboBoxSolidBorderBrush" Color="#777"/>
	<SolidColorBrush x:Key="HybridComboBoxLightBorderBrush" Color="#555"/>
	<SolidColorBrush x:Key="HybridComboBoxLightColorBrush" Color="#333"/>

	<!-- Checkmark、Radio Button、TreeViewItem、Expander ToggleButton の字形に使用されます -->
	<SolidColorBrush x:Key="GlyphBrush" Color="#BBB"/>

	<!-- ScrollViewer、TreeView、ListBox、Expander、TextBox、Tab Control の背景に使用されます -->
	<SolidColorBrush x:Key="WindowBackgroundBrush" Color="#000"/>

	<!-- コントロール周辺のキーボード フォーカスの表示のテンプレートです。 -->
	<ControlTemplate x:Key="HybridControlFocusVisual">
		<Border>
			<Rectangle Margin="0" Stroke="DodgerBlue" StrokeThickness="2"/>
		</Border>
	</ControlTemplate>

    <!-- HybridItemFocusVisual は HybridButton などコントロール周辺のキーボード フォーカスの表示に使用されます-->
    <Style x:Key="HybridItemFocusVisual">
        <Setter Property="Control.Template" Value="{StaticResource HybridControlFocusVisual}"/>
    </Style>

    <!-- Hybrid Button - このコントロールは各状態のブラシを設定します。これらのブラシは、静的リソースであるため、上記のリストに含まれている必要があります -->
    <Style x:Key="HybridButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource HybridItemFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource HybridComboBoxNormalBrush}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- グリッドは、より多くの要素を追加して簡単にボタンをカスタマイズできるため、ルートとして使用します -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"/>

                        <!-- コンテンツ プレゼンターではテキスト コンテンツなどがコントロールに置き換えられます -->
                        <!-- テンプレートを編集せずにコントロールをパラメーター化できるため、バインドが役立ちます -->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  RecognizesAccessKey="True"/>
                    </Grid>

                    <!--各状態では、テンプレートの枠線にブラシが設定されます -->
                    <ControlTemplate.Triggers>
                        <!-- IsKeyboardFocusedはキーボードなどでフォーカスされている状態です。 -->
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxPressedBrush}" TargetName="Border"/>
                        </Trigger>
                        <!-- IsMouseOverはマウスがコントロールの上にいる状態です。 -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource HybridComboBoxMouseOverBrush}" TargetName="Border"/>
                        </Trigger>
                        <!-- IsPressedはマウスなどがコントロールをクリックしている状態です。 -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource HybridComboBoxPressedBrush}" TargetName="Border"/>
                        </Trigger>
                        <!-- IsEnabledはコントロールの有効・無効の状態です。 -->
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource HybridComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- HybridComboBoxItemFocusVisual は HybridComboBoxButton などコントロール周辺のキーボード フォーカスの表示に使用されます-->
	<Style x:Key="HybridComboBoxItemFocusVisual">
		<Setter Property="Control.Template" Value="{StaticResource HybridComboBoxControlFocusVisual}"/>
	</Style>

	<!-- HybridComboBox Button - このコントロールは各状態のブラシを設定します。これらのブラシは、静的リソースであるため、上記のリストに含まれている必要があります -->
	<Style x:Key="HybridComboBoxButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource HybridComboBoxItemFocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource HybridComboBoxNormalBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxNormalBorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">

					<!-- グリッドは、より多くの要素を追加して簡単にボタンをカスタマイズできるため、ルートとして使用します -->
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"/>

						<!-- コンテンツ プレゼンターではテキスト コンテンツなどがコントロールに置き換えられます -->
						<!-- テンプレートを編集せずにコントロールをパラメーター化できるため、バインドが役立ちます -->
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  RecognizesAccessKey="True"/>
					</Grid>

					<!--各状態では、テンプレートの枠線にブラシが設定されます -->
					<ControlTemplate.Triggers>
						<!-- IsKeyboardFocusedはキーボードなどでフォーカスされている状態です。 -->
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxDefaultedBorderBrush}" TargetName="Border"/>
						</Trigger>
						<!-- IsMouseOverはマウスがコントロールの上にいる状態です。 -->
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource HybridComboBoxMouseOverBrush}" TargetName="Border"/>
						</Trigger>
						<!-- IsPressedはマウスなどがコントロールをクリックしている状態です。 -->
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource HybridComboBoxPressedBrush}" TargetName="Border"/>
						</Trigger>
						<!-- IsEnabledはコントロールの有効・無効の状態です。 -->
						<Trigger Property="IsEnabled" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource HybridComboBoxDisabledForegroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxDisabledBorderBrush}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HybridComboBox Repeat Button - これは HybridComboBox ScrollBar で上下のボタンとして使用されます -->
	<Style x:Key="HybridComboBoxRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
		<Setter Property="Background" Value="{StaticResource HybridComboBoxInvNormalBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxInvNormalBorderBrush}"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource HybridComboBoxItemFocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxDefaultedBorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource HybridComboBoxInvMouseOverBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource HybridComboBoxPressedBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxPressedBorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource HybridComboBoxDisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxDisabledBorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{StaticResource HybridComboBoxDisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HybridComboBox Thumb -  HybridComboBox Thumb は HybridComboBox ScrollBar のドラッグ可能な部分です -->
	<Style x:Key="HybridComboBoxThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid Margin="0,0,0,0" x:Name="Grid">
						<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="{DynamicResource HybridComboBoxInvNormalBrush}" Stroke="{DynamicResource HybridComboBoxInvNormalBorderBrush}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" Value="{StaticResource HybridComboBoxInvMouseOverBrush}" TargetName="Rectangle"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False"/>
						<Trigger Property="IsDragging" Value="True">
							<Setter Property="Fill" Value="{StaticResource HybridComboBoxPressedBrush}" TargetName="Rectangle"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HybridComboBox ScrollRepeatButton Style - この RepeatButton は HybridComboBox ScrollBar の HybridComboBox Thumb の上下で使用されます。HybridComboBox ScrollBar に重なって表示されないように透明に設定されています -->
	<Style x:Key="HybridComboBoxScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid>
						<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- HybridComboBox ScrollBar  これは HybridComboBoxThumb、HybridComboBoxRepeatButton、および HybridComboBoxScrollRepeatButton を利用します -->
	<Style x:Key="HybridComboBoxScrollBar" TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
						<Grid.RowDefinitions>
							<RowDefinition MaxHeight="18"/>
							<RowDefinition Height="0.00001*"/>
							<RowDefinition MaxHeight="18"/>
						</Grid.RowDefinitions>

						<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource HybridComboBoxRepeatButton}" Command="ScrollBar.LineUpCommand">
							<Grid>
								<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" Fill="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
							</Grid>
						</RepeatButton>

						<!-- Track は両端をジャンプしてスクロールする Thumb と Repeat Button のサイズを変更する特殊なレイアウト コンテナーです -->
						<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
							<Track.Thumb>
								<Thumb Style="{DynamicResource HybridComboBoxThumbStyle}"/>
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton x:Name="PageUp" Style="{DynamicResource HybridComboBoxScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
							</Track.IncreaseRepeatButton>
							<Track.DecreaseRepeatButton>
								<RepeatButton x:Name="PageDown" Style="{DynamicResource HybridComboBoxScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
							</Track.DecreaseRepeatButton>
						</Track>

						<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource HybridComboBoxRepeatButton}" Command="ScrollBar.LineDownCommand">
							<Grid>
								<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" Fill="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
							</Grid>
						</RepeatButton>
					</Grid>

					<!-- これは ScrollBar の単一のテンプレートを使用し、これを水平方向に回転します
					上下のコマンドの代わりに左右のコマンドを実行するように、コマンドの変更も行います -->
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Horizontal">

							<!-- ScrollBar を垂直から水平に回転します -->
							<Setter Property="LayoutTransform" TargetName="GridRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>

							<!-- Track は内部で Orientation にバインドされているため、回転して垂直に戻す必要があります -->
							<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

							<!-- 水平のコマンドを実行するようにコマンドを変更します -->
							<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
							<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HybridComboBox ScrollViewer 
	ScrollViewer は、ContentPresenter と水平および垂直の ScrollBar を持つグリッド コントロールです 
	これは、ListBox、MenuItem、ComboBox、および TreeView で使用されます -->
	<Style x:Key="HybridComboBoxScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<ScrollContentPresenter Grid.Column="0" Grid.Row="0"
												Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}"
												ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

						<!-- ScrollBars の表示はコントロールの実装で制御されます -->
						<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{StaticResource HybridComboBoxScrollBar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Background="Black" BorderBrush="{x:Null}" />
						<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{StaticResource HybridComboBoxScrollBar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HybridComboBox用トグルボタンです。 -->
	<ControlTemplate x:Key="HybridComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition Width="20"/>
			</Grid.ColumnDefinitions>
			<!-- トグルボタンを構成するグラフィックスのStroke、Fillをnullにします。 -->
			<Rectangle Grid.ColumnSpan="2" x:Name="Rectangle"
					   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
					   Width="Auto" Height="Auto" Fill="{StaticResource HybridComboBoxNormalBrush}" Stroke="{StaticResource HybridComboBoxNormalBorderBrush}"/>
			<Path Grid.Column="1" x:Name="Arrow" 
				  HorizontalAlignment="Center" VerticalAlignment="Center"
				  Fill="{StaticResource HybridComboBoxInvNormalBrush}" Data="M 0 0 L 4 4 L 8 0 Z" Stroke="{StaticResource HybridComboBoxNormalBorderBrush}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Fill" TargetName="Rectangle" Value="{StaticResource HybridComboBoxMouseOverBrush}"/>
				<Setter Property="Fill" TargetName="Arrow" Value="{StaticResource HybridComboBoxMouseOverForegroundBrush}"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Fill" TargetName="Rectangle" Value="{StaticResource HybridComboBoxMouseOverBrush}"/>
				<Setter Property="Fill" TargetName="Arrow" Value="{StaticResource HybridComboBoxMouseOverForegroundBrush}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="True"/>
			<!-- コントロールが無効の時、TextBlock風にします。 -->
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Fill" TargetName="Rectangle" Value="Transparent"/>
				<Setter Property="Fill" TargetName="Arrow" Value="{x:Null}"/>
				<Setter Property="Stroke" TargetName="Rectangle" Value="{x:Null}"/>
				<Setter Property="Stroke" TargetName="Arrow" Value="{x:Null}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- HybridComboBox用TextBoxです。 -->
	<ControlTemplate x:Key="HybridComboBoxTextBox" TargetType="{x:Type TextBox}">
		<!-- これは PART_ContentHost と名前を付ける必要があります -->
		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
	</ControlTemplate>

	<!-- HybridComboBox本体です。 -->
	<Style x:Key="HybridComboBox" TargetType="{x:Type ComboBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource HybridItemFocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<!-- ToggleButton は、IsDropDownOpen を切り替えるため ComboBox 自身にデータ バインドされています  -->
						<ToggleButton Grid.Column="2" Template="{StaticResource HybridComboBoxToggleButton}"
									  x:Name="ToggleButton" Focusable="false"
									  IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
						<ContentPresenter Margin="3,3,23,3" x:Name="ContentSite"
										  VerticalAlignment="{TemplateBinding VerticalAlignment}"
										  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
										  Content="{TemplateBinding SelectionBoxItem}"
										  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										  IsHitTestVisible="False"/>

						<!-- TextBox は PART_EditableTextBox と名前を付ける必要があります。それ以外の名前では、ComboBox で認識されません -->
						<TextBox Visibility="Hidden" Template="{StaticResource HybridComboBoxTextBox}"
								 Foreground="{TemplateBinding Foreground}"
								 HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}"
								 VerticalAlignment="{TemplateBinding VerticalAlignment}" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

						<!-- Popup には ComboBox のアイテム一覧が表示されます。IsOpen は、ComboBoxToggleButton を介して切り替えられる IsDropDownOpen にデータ バインドされています  -->
						<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
							<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
								<Border x:Name="DropDownBorder" Background="{StaticResource HybridComboBoxLightBrush}" BorderBrush="{StaticResource HybridComboBoxNormalBorderBrush}" BorderThickness="1"/>
								<ScrollViewer Margin="4,6,4,6" Style="{StaticResource HybridComboBoxScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

									 <!--StackPanel は IsItemsHost を True に設定することで子の表示に使用されます--> 
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- これにより、空の場合は DropDown に最小サイズが適用されます -->
						<Trigger Property="HasItems" Value="false">
							<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
						</Trigger>
						<!-- EnambleがFalseの時はポップアップを無効にします -->
						<Trigger Property="IsEnabled" Value="false"/>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
							<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
							<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false"/>
							<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HybridComboBox ComboBoxItem - これは ComboBox 内の各アイテムに使用されます。以下の各アイテムの選択された色を変更できます-->
	<!-- 
			<ComboBox Style="{StaticResource HybridComboBox}">
				<ComboBox.Resources>
					<Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource HybridComboBoxItem}"/>
				</ComboBox.Resources>
			</ComboBox>
	-->
    <Style x:Key="HybridComboBoxItem" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- IsHighlighted の SelectedBackgroundBrush を変更してアイテムの選択の色を設定します -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource HybridComboBoxSelectedBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="BorderBrush" Value="{StaticResource HybridComboBoxSelectedBorderBrush}"/>
                            <Setter Property="BorderThickness" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource HybridComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>